version: 2.1
orbs:
  bridge:
    executors:
      node-dev:
        docker:
          - image: circleci/node:10.15
        environment:
          TARGET_NETWORK: development
    commands:
      fetch_repo:
        description: "Checkout and init submodules"
        steps:
          - checkout
          - run:
              name: "Initialize submodules"
              command: git submodule update --init
      setup_docker:
        description: "Set up remote docker engine"
        steps:
          - setup_remote_docker:
              version: 18.09.3
              docker_layer_caching: true
      save_ganache_data:
        description: "Save dev environment in workspace"
        steps:
          - run:
              name: "Backup blockchains data using temporary container"
              command: |
                mkdir -p ./workspace/ganache_side_data
                mkdir -p ./workspace/ganache_home_data
                docker run --rm -v "ganache_side_data:/ganache_side_data" -v "ganache_home_data:/ganache_home_data" -itd --name tmp alpine:3.9.4
                docker cp "tmp:/ganache_side_data/." "./workspace/ganache_side_data"
                docker cp "tmp:/ganache_home_data/." "./workspace/ganache_home_data"
                docker kill tmp
          - persist_to_workspace:
              root: ./workspace
              paths:
                - ganache_side_data
                - ganache_home_data
      restore_ganache_data:
        description: "Restore dev environment from workspace"
        steps:
          - run:
              name: "Restore blockchains data from backup using temporary container"
              command: |
                docker volume create ganache_side_data
                docker volume create ganache_home_data
                docker run --rm -v "ganache_side_data:/ganache_side_data" -v "ganache_home_data:/ganache_home_data" -itd --name tmp alpine:3.9.4
                docker cp "./workspace/ganache_side_data/." "tmp:/ganache_side_data"
                docker cp "./workspace/ganache_home_data/." "tmp:/ganache_home_data"
                docker kill tmp
      restore_tss_image:
        description: "Restores tss image from cache"
        steps:
          - restore_cache:
              name: "Restore tss image from cache"
              key: "tss-v1-{{ .Branch }}"
          - load_tss
      save_tss:
        description: "Save tss image to workspace"
        steps:
          - run:
              name: "Save tss image to archive"
              command: |
                mkdir -p ./workspace
                docker save tss | gzip > ./workspace/tss.tar.gz
          - persist_to_workspace:
              name: "Save tss image to workspace"
              root: ./workspace
              paths:
                - tss.tar.gz
          - save_cache:
              name: "Save tss image to cache"
              paths:
                - ./workspace/tss.tar.gz
              key: "tss-v1-{{ .Branch }}"
      load_tss:
        description: "Load tss image from workspace"
        steps:
          - run:
              name: "Load tss image from archive"
              command: docker load -i ./workspace/tss.tar.gz || true
      save_docker_logs:
        description: "Save docker logs"
        parameters:
          validator:
            type: integer
            default: 1
        steps:
          - run:
              name: "Saving validator<< parameters.validator >> logs"
              command: |
                mkdir -p ./artifacts/logs/validator<< parameters.validator >>
                docker logs validator<< parameters.validator >>_rabbitmq_1 > ./artifacts/logs/validator<< parameters.validator >>/rabbitmq.log
                docker logs validator<< parameters.validator >>_redis_1 > ./artifacts/logs/validator<< parameters.validator >>/redis.log
                docker logs validator<< parameters.validator >>_proxy_1 > ./artifacts/logs/validator<< parameters.validator >>/proxy.log
                docker logs validator<< parameters.validator >>_eth-watcher_1 > ./artifacts/logs/validator<< parameters.validator >>/eth-watcher.log
                docker logs validator<< parameters.validator >>_bnc-watcher_1 > ./artifacts/logs/validator<< parameters.validator >>/bnc-watcher.log
                docker logs validator<< parameters.validator >>_signer_1 > ./artifacts/logs/validator<< parameters.validator >>/signer.log
                docker logs validator<< parameters.validator >>_keygen_1 > ./artifacts/logs/validator<< parameters.validator >>/keygen.log
              when: always
      save_artifacts:
        description: "Save and upload tests results, save validator logs to artifacts"
        steps:
          - run:
              name: "Save tests results"
              command: |
                mkdir -p ./artifacts/test_results/mocha
                docker cp "tests:/tests/results.xml" "./artifacts/test_results/mocha/results.xml"
              when: always
          - store_test_results:
              path: ./artifacts/test_results/mocha
              when: always
          - save_docker_logs:
              validator: 1
          - save_docker_logs:
              validator: 2
          - save_docker_logs:
              validator: 3
          - run:
              name: "Save ganache logs"
              command: |
                mkdir -p ./artifacts/logs/ganache
                docker logs ganache_home > ./artifacts/logs/ganache/home.log
                docker logs ganache_side > ./artifacts/logs/ganache/side.log
              when: always
          - store_artifacts:
              path: ./artifacts
              when: always
jobs:
  init_tss:
    executor: bridge/node-dev
    steps:
      - bridge/fetch_repo
      - bridge/setup_docker
      - bridge/restore_tss_image
      - run:
          name: "Build tss image"
          command: docker build --cache-from tss -t tss ./src/tss || docker build -t tss ./src/tss
      - bridge/save_tss
  init_blockchains:
    executor: bridge/node-dev
    steps:
      - bridge/fetch_repo
      - bridge/setup_docker
      - run:
          name: "Stub .keys file"
          command: touch ./src/test-services/.keys.$TARGET_NETWORK
      - run:
          name: "Run dev environment, deploy contracts, prefund accounts"
          command: |
            BLOCK_TIME=3 ./demo/start-environment.sh
            cat ./tests/config.json | jq .users[].ethAddress | xargs -I {} ./src/test-services/ethereumSend/run.sh {} 300
      - run:
          name: "Stop dev environment"
          command: docker kill ganache_side ganache_home
      - bridge/save_ganache_data
      - run:
          name: "Prefund bnc addresses"
          command: |
            echo "FOREIGN_PRIVATE_KEY=$FOREIGN_PRIVATE_KEY" > ./src/test-services/.keys.$TARGET_NETWORK
            cat ./tests/config.json | jq .users[].bncAddress | xargs -I {} ./src/test-services/binanceSend/run.sh {} 300 0.1
  run_tests:
    executor: bridge/node-dev
    steps:
      - bridge/fetch_repo
      - bridge/setup_docker
      - attach_workspace:
          at: ./workspace
      - bridge/load_tss
      - bridge/restore_ganache_data
      - run:
          name: "Init tests environment"
          command: |
            BLOCK_TIME=3 ./demo/start-environment.sh
            N=1 ./demo/validator-demo.sh -d
            N=2 ./demo/validator-demo.sh -d
            N=3 ./demo/validator-demo.sh -d
            docker ps
      - run:
          name: "Wait until validator nodes are ready"
          command: |
            docker run --network validator1_test_network --entrypoint ash appropriate/curl:latest -c "until curl -X GET http://proxy:8002/info > /dev/null 2>&1; do sleep 1; done"
            docker run --network validator2_test_network --entrypoint ash appropriate/curl:latest -c "until curl -X GET http://proxy:8002/info > /dev/null 2>&1; do sleep 1; done"
            docker run --network validator3_test_network --entrypoint ash appropriate/curl:latest -c "until curl -X GET http://proxy:8002/info > /dev/null 2>&1; do sleep 1; done"
          no_output_timeout: 3m
      - run:
          name: "Build and prepare tests container"
          command: |
            docker build -t tests ./tests
            docker create --env-file ./tests/.env -e FOREIGN_PRIVATE_KEY --name tests tests
            docker network connect blockchain_side tests
            docker network connect blockchain_home tests
            docker network connect validator1_test_network tests
            docker network connect validator2_test_network tests
            docker network connect validator3_test_network tests
      - run:
          name: "Run tests"
          command: docker start -a tests
      - run:
          name: "Check alive docker containers"
          command: docker ps
          when: always
      - bridge/save_artifacts
workflows:
  version: 2
  main:
    jobs:
      - init_tss
      - init_blockchains
      - run_tests:
          requires:
            - init_tss
            - init_blockchains

ObjC.import('stdlib')

const terminal = Application('Terminal')
const system = Application('System Events')
const curApp = Application.currentApplication()
curApp.includeStandardAdditions = true

const validator1 = '0x99Eb3D86663c6Db090eFFdBC20510Ca9f836DCE3'
const validator2 = '0xAa006899B0EC407De930bA8A166DEfe59bBfd3DC'
const validator3 = '0x6352e3e6038e05b9da00C84AE851308f9774F883'

const userAccounts = [
  {
    privateKey: '7ed93ad7753e00b52265a73dfbbcd2296256772965323fcb9a6320b5cd084b89',
    ethAddress: '0x4db6b4bd0a3fdc03b027a60f1c48f05c572312aa',
    bncAddress: 'tbnb14r3z8xk7qsar3vwj05w8cd8gqwk7g6gfurlt5l'
  },
  {
    privateKey: '2ad6e3a232ad3ea058b61352302118a99085600ff8b6eec4ccf0066a33756231',
    ethAddress: '0xf7ca4aed1795e424433498cef43f6a3825c88731',
    bncAddress: 'tbnb1efjg7xt98t67ql2cmwjc5860lgayet9l8m55ym'
  },
  {
    privateKey: 'eb6dd328677b3fa2822fb8e834507e569bda52e8ffa49266df0f2de239c4ec98',
    ethAddress: '0xad6c8127143032d843a260c5d379d8d9b3d51f15',
    bncAddress: 'tbnb12epcy4p7ktas0nlyrfuektcyh0e83dwzuq73f4'
  }
]

let bridgeBncAddress

const windows = terminal.windows()

const wins = []

function saveBlockchainData () {
  console.log('Saving blockchain data')
  curApp.doShellScript('zip -r ./demo/ganache_home_backup.zip ./demo/ganache_home_db')
  curApp.doShellScript('zip -r ./demo/ganache_side_backup.zip ./demo/ganache_side_db')
}

function reloadBlockchainData () {
  console.log('Reloading blockchain data')
  curApp.doShellScript('unzip -d . ./demo/ganache_home_backup.zip')
  curApp.doShellScript('unzip -d . ./demo/ganache_side_backup.zip')
}

function closeOldWindows () {
  for (let i in windows) {
    try {
      windows[i].selectedTab()

      if (windows[i].selectedTab().customTitle().startsWith('Validator') || windows[i].selectedTab().customTitle() === 'Services') {
        windows[i].close()
      }
    } catch (e) {
    }
  }
}

function killValidators () {
  terminal.activate()
  for (let i = 0; i < 3; i++) {
    wins[i].frontmost = true
    delay(0.5)
    system.keystroke('c', { using: 'control down' })
  }
}

function openNewWindows () {
  for (let i = 0; i < 3; i++) {
    // open new terminal
    const tab = terminal.doScript()
    // get opened window
    const winId = terminal.windows[0].id()
    wins[i] = terminal.windows.byId(winId)
    tab.customTitle = `Validator ${i + 1}`
  }
  wins[0].bounds = { x: 0, y: 23, width: 558, height: 1027 }
  wins[1].bounds = { x: 559, y: 374, width: 560, height: 676 }
  wins[2].bounds = { x: 1120, y: 374, width: 560, height: 676 }
  // open new terminal
  const tab = terminal.doScript()
  // get opened window
  const winId = terminal.windows[0].id()
  wins[3] = terminal.windows.byId(winId)
  tab.customTitle = `Services`
  wins[3].bounds = { x: 559, y: 23, width: 1120, height: 350 }

  terminal.activate()
  delay(0.5)
}

function apiRequestBackground (url) {
  const response = curApp.doShellScript(`curl -s -X GET "${url}"`)
  try {
    return JSON.parse(response)
  } catch (e) {
    return response
  }
}

function exec (n, script) {
  terminal.doScript(script, { in: wins[n - 1] })
}

function wait (n) {
  while (wins[n - 1].selectedTab().busy()) {
    delay(0.2)
  }
}

function execSync (n, script) {
  exec(n, script)
  wait(n)
}

function waitAll () {
  wait(1)
  wait(2)
  wait(3)
  wait(4)
}

function waitLog (n, log) {
  do {
    const s = wins[n - 1].selectedTab().contents().split('\n').find(x => x.includes(log))
    if (s) {
      return s
    }
    delay(0.2)
  } while (true)
}

function waitApi (n, url, check) {
  do {
    const res = apiRequestBackground(`http://localhost:500${n}${url}`)
    const checkerRes = check ? check(res) : true
    if (checkerRes)
      return checkerRes
    delay(3)
  } while (true)
}

function prefundEthAddresses () {
  for (let { ethAddress } of userAccounts) {
    execSync(4, `./src/test-services/ethereumSend/run.sh ${ethAddress} 100`)
  }
}

function prefundBncAddresses () {
  for (let { bncAddress } of userAccounts) {
    execSync(4, `./src/test-services/binanceSend/run.sh ${bncAddress} 100 0.1`)
  }
}

function initBalances () {
  userAccounts.forEach(account => {
    account.ethBalance = getEthTokenBalance(account.ethAddress)
    account.bncBalance = getBncTokenBalance(account.bncAddress)
  })
}

function getBncTokenBalance (address) {
  const res = curApp.doShellScript(`./src/test-services/binanceBalance/run.sh ${address}`)
  return parseFloat(/KFT-94F: [0-9.]+/.exec(res)[0].split(' ')[1])
}

function waitBncTokenBalance (address, balance) {
  while (true) {
    const newBalance = getBncTokenBalance(address)
    if (Math.abs(newBalance - balance) < 0.0001)
      return newBalance
    delay(3)
  }
}

function getEthTokenBalance (address) {
  const res = curApp.doShellScript(`./src/test-services/ethereumBalance/run.sh ${address}`)
  return parseFloat(/[0-9.]+ tokens/.exec(res)[0].split(' ')[0])
}

function waitEthTokenBalance (address, balance) {
  while (true) {
    const newBalance = getEthTokenBalance(address)
    if (Math.abs(newBalance - balance) < 0.0001)
      return newBalance
    delay(3)
  }
}

function apiRequest (n, url, suffix) {
  execSync(4, `curl -s -X GET http://localhost:500${n}${url} ${suffix ? suffix : ''}`)
}

function printState (msg) {
  execSync(4, `echo "${msg}"`)
  apiRequest(1, '/info', '| jq .')
}

function initCwd () {
  const cwd = $.getenv('PWD')

  for (let i = 1; i <= 4; i++) {
    exec(i, `cd "${cwd}"`)
  }
  waitAll()
}

function killDockerContainers () {
  execSync(4, `docker kill $(docker ps | grep validator | awk '{print $1}') > /dev/null 2>&1 || true`)
  execSync(4, `docker kill ganache_side ganache_home > /dev/null 2>&1 || true`)
}

function clean () {
  killDockerContainers()
  execSync(4, `./demo/clean.sh`)

  exec(1, `clear`)
  exec(2, `clear`)
  exec(3, `clear`)
  waitAll()
}

function testEthToBnc () {
  console.log('Testing eth => bnc')
  // try token transfer in eth => bnc direction
  let prevBridgeHomeBalance
  let prevBridgeForeignBalance
  waitApi(1, '/info', res => {
    prevBridgeHomeBalance = res.homeBalance
    prevBridgeForeignBalance = res.foreignBalanceTokens
    return true
  })

  userAccounts.forEach((account, i) => {
    execSync(4, `PRIVATE_KEY=${account.privateKey} ./src/test-services/ethereumSend/run.sh bridge ${5 + i}`)
    account.ethBalance -= 5 + i
  })

  const delta = (9 + userAccounts.length) * userAccounts.length / 2
  waitApi(1, '/info', res => res.homeBalance === prevBridgeHomeBalance + delta && res.foreignBalanceTokens === prevBridgeForeignBalance - delta)

  userAccounts.forEach((account, i) => {
    account.bncBalance = waitBncTokenBalance(account.bncAddress, account.bncBalance + 5 + i)
  })

  printState(`Token transfer in eth => bnc direction succeed`)
  console.log('Testing eth => bnc is OK')
}

function testBncToEth () {
  console.log('Testing bnc => eth')
  // try token transfer in bnc => eth direction
  let prevBridgeHomeBalance
  let prevBridgeForeignBalance
  waitApi(1, '/info', res => {
    prevBridgeHomeBalance = res.homeBalance
    prevBridgeForeignBalance = res.foreignBalanceTokens
    return true
  })

  userAccounts.forEach((account , i) => {
    execSync(4, `PRIVATE_KEY=${account.privateKey} ./src/test-services/binanceSend/run.sh ${bridgeBncAddress} ${3 + i}`)
    account.bncBalance -= 3 + i
  })

  const delta = (5 + userAccounts.length) * userAccounts.length / 2

  waitApi(1, '/info', res => res.homeBalance === prevBridgeHomeBalance - delta && res.foreignBalanceTokens === prevBridgeForeignBalance + delta)

  userAccounts.forEach((account, i) => {
    account.ethBalance = waitEthTokenBalance(account.ethAddress, account.ethBalance + 3 + i)
  })

  printState(`Token transfer in bnc => eth direction succeed`)
  console.log('Testing bnc => eth is OK')
}

function testRemoveValidator () {
  console.log('Testing removing validator')
  apiRequest(1, '/vote/startVoting')
  apiRequest(2, '/vote/startVoting')
  waitApi(1, '/info', res => res.bridgeStatus === 'voting')
  apiRequest(1, `/vote/removeValidator/${validator2}`)
  apiRequest(3, `/vote/removeValidator/${validator2}`)
  waitApi(1, '/info', res => res.nextValidators.length === 2)
  apiRequest(1, '/vote/startKeygen')
  apiRequest(3, '/vote/startKeygen')
  waitApi(1, '/info', res => {
    if (res.bridgeStatus === 'ready' && res.epoch === 2 && res.validators.length === 2) {
      bridgeBncAddress = res.foreignBridgeAddress
      return true
    }
    return false
  })
  printState(`Removing validator succeed`)
  console.log('Testing removing validator is OK')
}

function testAddValidator () {
  console.log('Testing adding validator')
  apiRequest(1, '/vote/startVoting')
  apiRequest(3, '/vote/startVoting')
  waitApi(1, '/info', res => res.bridgeStatus === 'voting')
  apiRequest(1, `/vote/addValidator/${validator2}`)
  apiRequest(3, `/vote/addValidator/${validator2}`)
  waitApi(1, '/info', res => res.nextValidators.length === 3)
  apiRequest(1, '/vote/startKeygen')
  apiRequest(3, '/vote/startKeygen')
  waitApi(1, '/info', res => {
    if (res.bridgeStatus === 'ready' && res.epoch === 3 && res.validators.length === 3) {
      bridgeBncAddress = res.foreignBridgeAddress
      return true
    }
    return false
  })
  printState(`Adding validator succeed`)
  console.log('Testing adding validator is OK')
}

function testChangeThreshold () {
  console.log('Testing changing threshold')
  apiRequest(1, '/vote/startVoting')
  apiRequest(3, '/vote/startVoting')
  waitApi(1, '/info', res => res.bridgeStatus === 'voting')
  apiRequest(2, `/vote/changeThreshold/2`)
  apiRequest(3, `/vote/changeThreshold/2`)
  waitApi(1, '/info', res => res.nextThreshold === 2)
  apiRequest(1, '/vote/startKeygen')
  apiRequest(2, '/vote/startKeygen')
  waitApi(1, '/info', res => {
    if (res.bridgeStatus === 'ready' && res.epoch === 4 && res.threshold === 2) {
      bridgeBncAddress = res.foreignBridgeAddress
      return true
    }
    return false
  })
  printState(`Changing threshold succeed`)
  console.log('Testing changing threshold is OK')
}

function run () {
  closeOldWindows()

  openNewWindows()

  initCwd()

  clean()

  if ($.getenv('RELOAD') !== 'true') {
    execSync(4, `./demo/start-environment.sh`)

    prefundEthAddresses()

    saveBlockchainData()
  } else {
    reloadBlockchainData()

    execSync(4, `./demo/start-environment.sh`)
  }

  prefundBncAddresses()

  initBalances()

  exec(1, `N=1 ./demo/validator-demo.sh`)
  exec(2, `N=2 ./demo/validator-demo.sh`)
  exec(3, `N=3 ./demo/validator-demo.sh`)

  // wait until binance account willl be generated
  waitLog(1, 'Generated multisig account in binance chain')
  waitApi(1, '/info', res => {
    if (res.epoch === 1) {
      bridgeBncAddress = res.foreignBridgeAddress
      return true
    }
    return false
  })

  // prefund binance account
  execSync(4, `./src/test-services/binanceSend/run.sh ${bridgeBncAddress} 100 0.1`)

  // wait until binance prefund transaction will be processed
  waitApi(1, '/info', res => res.foreignBalanceTokens === 100)

  printState(`Binance bridge account at ${bridgeBncAddress} for epoch 1 is generated and prefunded`)

  testEthToBnc()

  testBncToEth()

  testRemoveValidator()

  testEthToBnc()

  testBncToEth()

  testAddValidator()

  testEthToBnc()

  testBncToEth()

  testChangeThreshold()

  testEthToBnc()

  testBncToEth()

  console.log('PASSED ALL TESTS')

  killValidators()

  killDockerContainers()
}
